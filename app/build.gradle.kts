/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Plugin do Spring Boot
    id("org.springframework.boot") version "3.3.3"
    id("io.spring.dependency-management") version "1.1.6"
    id("org.flywaydb.flyway") version "9.22.0"

    // Aplica os plugins para construir uma aplicação em Java.
    application
    java
}

flyway {
    url = "jdbc:postgresql://localhost:5432/parking_db"
    user = "user"
    password = "password"
    schemas = arrayOf("public")
    locations = arrayOf("classpath:db/migration")

}

repositories {
    // Usa o Maven Central para resolver as dependências.
    mavenCentral()
}

dependencies {
    // Dependências para Jakarta Persistence (JPA)
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
    implementation("org.hibernate.orm:hibernate-core:6.2.9.Final")

    // Dependência para validação Jakarta
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")

    // Dependências do Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")

    // Driver JDBC para PostgreSQL
    implementation("org.postgresql:postgresql:42.7.2")

    // Lombok para gerar código automaticamente como getters, setters, e construtores
    implementation("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")

    implementation("org.modelmapper:modelmapper:3.1.0")

    implementation("org.slf4j:slf4j-api:2.0.9")
    implementation("ch.qos.logback:logback-classic:1.4.12")

    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.security:spring-security-core:6.3.0")
    implementation("org.springframework.security:spring-security-config:6.2.0")
    implementation("org.springframework.security:spring-security-web:6.3.0")

    implementation ("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")

    implementation("javax.servlet:javax.servlet-api:4.0.1")


    // Dependências para testes
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")
    testImplementation("org.mockito:mockito-core:5.5.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

}

tasks.named<Test>("test") {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        showExceptions = true
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showStandardStreams = true
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

application {
    // Define a classe principal para a aplicação.
    mainClass.set("org.example.Application")
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Test> {
    useJUnitPlatform()
}



